/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'base' // to get access to the clean task
}


configurations {
    /*soniclibs {
        transitive = false
    }*/
}

def sonicLibsToExtractV10 = [
        "${System.getenv('SONIC_HOME')}\\MQ10.0\\lib\\smc.jar",
        "${System.getenv('SONIC_HOME')}\\MQ10.0\\lib\\xercesImpl.jar",
        "${System.getenv('SONIC_HOME')}\\MQ10.0\\lib\\mgmt_config.jar",
        "${System.getenv('SONIC_HOME')}\\MQ10.0\\lib\\sonic_Client.jar",
        "${System.getenv('SONIC_HOME')}\\MQ10.0\\lib\\sonic_Crypto.jar",
        "${System.getenv('SONIC_HOME')}\\MQ10.0\\lib\\sonic_XMessage.jar",
        "${System.getenv('SONIC_HOME')}\\MQ10.0\\lib\\MFdirectory.jar",
        "${System.getenv('SONIC_HOME')}\\MQ10.0\\lib\\mgmt_client.jar",
        "${System.getenv('SONIC_HOME')}\\MQ10.0\\lib\\sonic_mgmt_client.jar"
]

def sonicLibsToExtractV12 = [
        "${System.getenv('SONIC_HOME')}\\MQ12.0\\lib\\smc.jar",
        "${System.getenv('SONIC_HOME')}\\MQ12.0\\lib\\xercesImpl.jar",
        "${System.getenv('SONIC_HOME')}\\MQ12.0\\lib\\mgmt_config.jar",
        "${System.getenv('SONIC_HOME')}\\MQ12.0\\lib\\sonic_Client.jar",
        "${System.getenv('SONIC_HOME')}\\MQ12.0\\lib\\sonic_Crypto.jar",
        "${System.getenv('SONIC_HOME')}\\MQ12.0\\lib\\sonic_XMessage.jar",
        "${System.getenv('SONIC_HOME')}\\MQ12.0\\lib\\MFdirectory.jar",
        "${System.getenv('SONIC_HOME')}\\MQ12.0\\lib\\mgmt_client.jar",
        "${System.getenv('SONIC_HOME')}\\MQ12.0\\lib\\sonic_mgmt_client.jar"
]



def deleteTempSonicSubfolder = tasks.register('deleteTempSonicSubfolder', Delete){
    dependsOn processSonicJars
    mustRunAfter processSonicJars
    doLast {
        fileTree(dir: "$projectDir/.sonic-libs/compileOnly").exclude("*.jar").visit { FileVisitDetails details ->
            delete details.file
        }
        println "Deleted temporary folders in: $projectDir/.sonic-libs/compileOnly"
    }
}

task processSonicJars {
    def libsDir = new File("$projectDir/.sonic-libs/compileOnly")
    // only extract if the libs folder does not exist yet
    if (!libsDir.exists()) {
        // Check if the folder for MQ10.0 exists
        def sonicHome = "${System.getenv('SONIC_HOME')}"
        def sonicLibsFolder = "${sonicHome}\\MQ10.0"
        def chosenSonicLibs = new File(sonicLibsFolder).exists() ? sonicLibsToExtractV10 : sonicLibsToExtractV12

        chosenSonicLibs.each { jarFileName ->
            def jarFile = new File(jarFileName)
            copy {
                from project.zipTree(jarFile)
                into new File(project.projectDir, ".sonic-libs/compileOnly/" + jarFile.name.replace(".jar",""))
                exclude "**/javax/**"
            }
            println "Extracted JAR: $jarFileName" // Print progress
        }

        // Loop through extracted subfolders and create JAR for each
        libsDir.eachDir { subfolder ->
            println "Zip/Jar processing folder: " + subfolder.name + " (" + subfolder.isDirectory()+ ")"
            def taskName = "zip${subfolder.name.capitalize()}"
            task "$taskName"(type: Jar) {
                getDestinationDirectory().set(file("$projectDir/.sonic-libs/compileOnly/"))
                getArchiveFileName().set("${subfolder.name}.jar")
                from(subfolder)
            }
            processSonicJars.dependsOn(taskName)
        }
    }

}

dependencies {
    implementation project(':messagemanager-plugin-api')
    implementation project(':messagemanager-core')
    implementation project(':messagemanager-ui')

    implementation 'com.google.inject:guice:5.1.0'

    testImplementation 'junit:junit:[4,5)'

    //TODO: need to see if this should be part of sonicLibs
    //implementation 'javax.activation:activation:1.1.1'
    //compileOnly 'javax.activation:activation:1.1.1' // if this is set then remove the activation lines form modules-info
    implementation 'com.sun.activation:javax.activation:1.2.0'

    compileOnly fileTree(dir: '.sonic-libs/compileOnly', includes: ['*.jar'])
    //implementation fileTree(dir: './sonic-libs/implementation', includes: ['*.jar'])
}

compileJava.dependsOn deleteTempSonicSubfolder


description = 'Message Manager for SonicMQ'
