plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id "org.beryx.jlink" version "3.0.1"

//    id 'org.beryx.runtime' version '1.13.1'

// fat jar
//    id "com.github.johnrengelman.shadow" version "7.1.2"
}

group = 'at.conapi.messagemanager.bootstrap'

repositories {
    mavenCentral()
}

application {
    mainClass = 'at.conapi.messagemanager.bootstrap.App'
}


javafx {
    version = '17'
    modules = [ 'javafx.controls', 'javafx.fxml' , 'javafx.graphics']
//    platform = 'mac'
}


ext{
    javaFxVersion = '17'

    appName = "Message Manager Bootstrap"
    appLauncher = "Message Manager"
    appPackaging = "messagemanager-bootstrap"
    appModuleName = "messagemanager.bootstrap"
    appMainClass = "at.conapi.messagemanager.bootstrap.App"

    bootstrapRoot = "${buildDir}/root"
    bootstrapTarget = "${bootstrapRoot}/target"
    bootstrapConfigLocation="${bootstrapTarget}/config"
}

dependencies {
    //I hate this but javafx plugin only allows one platform
  /*  implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'

    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'

    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'

    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'
*/


  //  testImplementation platform('org.junit:junit-bom:5.9.1')
  //  testImplementation 'org.junit.jupiter:junit-jupiter'

   // implementation 'org.openjfx:javafx-controls:11.0.1'
   // implementation 'org.openjfx:javafx-fxml:11.0.1'
    implementation 'org.update4j:update4j:1.5.9'

    implementation project(':messagemanager-app')
    implementation project(':messagemanager-bootstrap-config')
}

test {
//    useJUnitPlatform()
}


//jlink:
mainClassName = "${ext.appModuleName}/${ext.appMainClass}"

//.\gradlew :messagemanager-bootstrap:jlink
jlink {

//check https://bitbucket.org/walczak_it/pdf-decorator/src/master/build.gradle
    //imageDir = file("${buildDir}/distributions/imageDir")
    //imageZip = file("${buildDir}/distributions/${appPackaging}.zip")
 //   imageZip = project.file("${buildDir}/distributions/${appPackaging}-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = "${appLauncher}"
    }


    // i.e. messagemanager-sonicbranch> .\gradlew :messagemanager-bootstrap:jpackage -PinstallerType=msi
    jpackage {
        version = 1.0 //FAILS IF version is set to a snapshot version.

        installerOptions = [
                '--description', project.description,
                '--copyright', 'Copyrigth 2024 conapi GmbH'
        ]

        installerType = project.findProperty('installerType') // we will pass this from the command line (example: -PinstallerType=msi)
        if (installerType == 'msi') {
            //imageOptions += ['--icon', 'src/main/resources/pdfdecorator/gui/icon.ico']
            installerOptions += [
                    '--win-per-user-install', '--win-dir-chooser',
                    '--win-menu', '--win-shortcut'
            ]
        }
        if (installerType == 'pkg') {
           // imageOptions += ['--icon', 'src/main/resources/pdfdecorator/gui/icon.icns']
        }
        if (installerType in ['deb', 'rpm']) {
            //imageOptions += ['--icon', 'src/main/resources/pdfdecorator/gui/icon_256x256.png']
            installerOptions += [
                    '--linux-menu-group', 'Office',
                    '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                    '--linux-deb-maintainer', 'office@walczak.it'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                    '--linux-rpm-license-type', 'GPLv3'
            ]
        }
    }


}

task dist {
    dependsOn clean, jlink
    description "Calls clean and then jlink [default]"
}

defaultTasks 'dist'

jpackage {
    doFirst {
        project.getProperty('installerType') // throws exception if its missing
    }
}

//TODO: fix build to use proper gradle approach, below is bad

task copyJavaFxJars(type: Copy) {
    from configurations.runtimeClasspath
    include '**/javafx-*.jar'
    rename '(javafx-[a-z]*-[0-9]*).*.jar', '$1.jar' // remove classified win/linux/mac
    into "${bootstrapTarget}/javafx"
}

task copyBootstrapJars(type: Copy) {
    from "${buildDir}/libs"
    include '**/*.jar'
    into "${bootstrapTarget}/config/bootstrap"
}

task copyLaunchScripts(type: Copy) {
    from "${projectDir}/scripts"
    include '**/*'
    into "${bootstrapTarget}/config/bin"
}

task copyUpdate4jJar(type: Copy) {
    from configurations.runtimeClasspath
    include '**/update4j-*.jar'
    rename '([a-z]*-[a-z]*).*.jar', '$1.jar' // remove version from jar
    into "${bootstrapTarget}/config/bootstrap"
}

task copyAppJars(type: Copy) {
    from "${buildDir}/../../messagemanager-app/build/update4j/messagemanager"
    include '**/*.jar'
    into "${bootstrapTarget}/config/app"
}


task createUpdate4JConfig(type: JavaExec){
        dependsOn('copyBootstrapJars','copyAppJars', 'copyJavaFxJars', 'copyUpdate4jJar', 'copyLaunchScripts')

    // Executable jars can have only _one_ jar on the classpath.
    //classpath = files("${buildDir}/bootstrap-jars/")
    classpath = sourceSets.main.runtimeClasspath

    // 'main' does not need to be specified
    mainClass = 'at.conapi.messagemanager.bootstrap.config.CreateConfig'

    // arguments to pass to the application
    args(bootstrapRoot, bootstrapTarget, bootstrapConfigLocation)

}


//build.compileJava.dependsOn copyPluginJars

build.dependsOn createUpdate4JConfig
