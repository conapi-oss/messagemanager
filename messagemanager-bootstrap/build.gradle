import org.codehaus.groovy.runtime.GStringImpl

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

group = 'at.conapi.messagemanager.bootstrap'

repositories {
    mavenCentral()
}

application {
    mainClass = 'at.conapi.messagemanager.bootstrap.App'
}

javafx {
    version = '17'
    modules = [ 'javafx.controls', 'javafx.fxml' , 'javafx.graphics']
}

ext {
    javaFxVersion = '17'

    appName = "Message Manager Bootstrap"
    appLauncher = "Message Manager"
    appPackaging = "messagemanager-bootstrap"
    appModuleName = "messagemanager.bootstrap"
    appMainClass = "at.conapi.messagemanager.bootstrap.App"

    bootstrapRoot = "${buildDir}/root" as GStringImpl
    bootstrapTarget = "${bootstrapRoot}/target" as GStringImpl
    bootstrapConfigLocation= "${bootstrapTarget}/config" as GStringImpl
}

dependencies {
    implementation 'org.update4j:update4j:1.5.9'
    implementation project(':messagemanager-app')
    implementation project(':messagemanager-bootstrap-config')
}

tasks.register('copyJavaFxJars', Copy) {
    from configurations.runtimeClasspath
    include '**/javafx-*.jar'
    rename '(javafx-[a-z]*-[0-9]*).*.jar', '$1.jar' // remove classified win/linux/mac
    into "${bootstrapTarget}/javafx"
}

tasks.register('copyBootstrapJars', Copy) {
    dependsOn(jar)

    from "${buildDir}/libs"
    include '**/*.jar'
    rename '([a-z]*-[a-z]*).*.jar', '$1.jar' // remove version
    into "${bootstrapTarget}/config/bootstrap"
}

tasks.register('copyLaunchScripts', Copy) {
    from "${projectDir}/scripts"
    include '**/*'
    into "${bootstrapTarget}/config/bin"
}

tasks.register('copyUpdate4jJar', Copy) {
    from configurations.runtimeClasspath
    include '**/update4j-*.jar'
    rename '(update4j).*.jar', '$1.jar' // remove version from jar
    into "${bootstrapTarget}/config/bootstrap"
}

tasks.register('copyAppJars', Copy) {
    dependsOn(":messagemanager-app:copyAllDependencies")

    from "${buildDir}/../../messagemanager-app/build/update4j/messagemanager"
    include '**/*.jar'
    rename '(jmsmessages)-.*.jar', '$1.jar' // remove version
    rename '(messagemanager-[a-z]*).*.jar', '$1.jar' // remove version
    into "${bootstrapTarget}/config/app"
}


tasks.register('createUpdate4JConfig', JavaExec) {
    dependsOn('copyBootstrapJars', 'copyAppJars', 'copyJavaFxJars', 'copyUpdate4jJar', 'copyLaunchScripts')
    dependsOn(":messagemanager-bootstrap-config:jar")

    // ensure the plugins are built!
    dependsOn(":messagemanager-sonicmq:jar")
    // Executable jars can have only _one_ jar on the classpath.
    //classpath = files("${buildDir}/bootstrap-jars/")
    classpath = sourceSets.main.runtimeClasspath

    // 'main' does not need to be specified
    mainClass = 'at.conapi.messagemanager.bootstrap.config.CreateConfig'

    // arguments to pass to the application
    args(bootstrapRoot, bootstrapTarget, bootstrapConfigLocation)
}


//build.compileJava.dependsOn copyPluginJars
build.dependsOn('createUpdate4JConfig')