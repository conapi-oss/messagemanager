import org.codehaus.groovy.runtime.GStringImpl

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id "de.inetsoftware.setupbuilder" version "8.4.21" // version depends on Gradle version
}

apply plugin: 'de.inetsoftware.setupbuilder'

group = 'at.conapi.messagemanager.bootstrap'

repositories {
    mavenCentral()
}

application {
    mainClass = 'at.conapi.messagemanager.bootstrap.App'
}

javafx {
    version = '17'
    modules = [ 'javafx.controls', 'javafx.fxml' , 'javafx.graphics']
}

ext {
    javaFxVersion = '17'

    appName = "Message Manager Bootstrap"
    appLauncher = "Message Manager"
    appPackaging = "messagemanager-bootstrap"
    appModuleName = "messagemanager.bootstrap"
    appMainClass = "at.conapi.messagemanager.bootstrap.App"

    bootstrapRoot = "${buildDir}/root" as GStringImpl
    bootstrapTarget = "${bootstrapRoot}/target" as GStringImpl
    bootstrapConfigLocation= "${bootstrapTarget}/config" as GStringImpl
}

dependencies {
    implementation 'org.update4j:update4j:1.5.9'
    implementation project(':messagemanager-app')
    implementation project(':messagemanager-bootstrap-config')
}

tasks.register('copyJavaFxJars', Copy) {
    from configurations.runtimeClasspath
    include '**/javafx-*.jar'
    rename '(javafx-[a-z]*-[0-9]*).*.jar', '$1.jar' // remove classified win/linux/mac
    into "${bootstrapTarget}/javafx"
}

tasks.register('copyBootstrapJars', Copy) {
    dependsOn(jar)

    from "${buildDir}/libs"
    include '**/*.jar'
    rename '([a-z]*-[a-z]*).*.jar', '$1.jar' // remove version
    into "${bootstrapTarget}/config/bootstrap"
}

tasks.register('copyLaunchScripts', Copy) {
    from "${projectDir}/scripts"
    include '**/*'
    into "${bootstrapTarget}/config/bin"
}

tasks.register('copyUpdate4jJar', Copy) {
    from configurations.runtimeClasspath
    include '**/update4j-*.jar'
    rename '(update4j).*.jar', '$1.jar' // remove version from jar
    into "${bootstrapTarget}/config/bootstrap"
}

tasks.register('copyAppJars', Copy) {
    dependsOn(":messagemanager-app:copyAllDependencies")

    from "${buildDir}/../../messagemanager-app/build/update4j/messagemanager"
    include '**/*.jar'
    rename '(jmsmessages)-.*.jar', '$1.jar' // remove version
    rename '(messagemanager-[a-z]*).*.jar', '$1.jar' // remove version
    into "${bootstrapTarget}/config/app"
}


tasks.register('createUpdate4JConfig', JavaExec) {
    dependsOn('copyBootstrapJars', 'copyAppJars', 'copyJavaFxJars', 'copyUpdate4jJar', 'copyLaunchScripts')
    dependsOn(":messagemanager-bootstrap-config:jar")

    // ensure the plugins are built!
    dependsOn(":messagemanager-sonicmq:jar")
    // Executable jars can have only _one_ jar on the classpath.
    //classpath = files("${buildDir}/bootstrap-jars/")
    classpath = sourceSets.main.runtimeClasspath

    // 'main' does not need to be specified
    mainClass = 'at.conapi.messagemanager.bootstrap.config.CreateConfig'

    // arguments to pass to the application
    args(bootstrapRoot, bootstrapTarget, bootstrapConfigLocation)
}


//build.compileJava.dependsOn copyPluginJars
build.dependsOn('createUpdate4JConfig')


def isWindows = System.properties['os.name'].toLowerCase().contains('windows')
// setup builder
setupBuilder {
    vendor = 'conapi gmbh'
    application = "Message Manager"
    appIdentifier = "MessageManager"
    version = project.version.toString().replaceAll('-SNAPSHOT','')
 //   licenseFile = 'license.txt'
    // icons in different sizes for different usage. you can also use a single *.ico or *.icns file
   // icons = ['icon16.png', 'icon32.png', 'icon48.png', 'icon128.png']
    icons = "src/main/resources/icons/conapi.icns"

    // all files for all platforms
    from( bootstrapConfigLocation ) {
        include '**/*'
    }

    //mainClass = 'com.inet.testapplication.TestLauncher'
    //mainJar = 'testBuilds.jar'

    if(isWindows) {
        // https://github.com/i-net-software/SetupBuilder/wiki/DSL-of-desktopStarter
        desktopStarter {
            displayName   = "Message Manager"
            //description   = "This is an Application service"
            location = com.inet.gradle.setup.abstracts.DesktopStarter.Location.ApplicationMenu
            //ApplicationProgramsFolder
            executable = "launch.cmd"
            workDir = "bin"
            // optional, additional arguments to start the service with
            //startArguments = "--open"

            // optional, an icon file. Defaults to setupBuilder.icons
//            icons          = "service.icns"
        }
    }

    //TODO: need to find a better way to do this
    bundleJre = "c:/java/jdk17"
}

// see https://github.com/i-net-software/SetupBuilder/wiki/DSL-of-Windows-Builder
msi {
    // optional, architecture to build. Defaults to x64.
    // Allows: x86, x64, ia64, x86-only
    arch = "x64"

    // A banner file for the installer with a typical size of 493 x 58
    bannerBmp = layout.projectDirectory.file("installer/setup_banner.png").asFile.toString()

    // A dialog banner file for the installer with a size of 493 x 312
    dialogBmp = layout.projectDirectory.file("installer/setup_background.png").asFile.toString()

    // Set up information about the signtool
    //signTool { ... }

    // add a launch4j configuration to create an executable first
    // can be added multiple times
  //  launch4j { ... }

    // optional, set a custom WXS template
    wxsTemplate = layout.projectDirectory.file("installer/template.wxs").asFile.toString()

    // optional, list of languages to build the setup for. By default all languages will be build which takes a long time
    languages = [ "en-US", "de-DE" ]

    // set the minimum OS version for this installer to work on. See below
    //minOS = 10.0

    // optional, indicated that the application can be installed as multiple instances
    multiInstanceCount = 1

    // optional, a VB-Script to allow the setup of multiple instances
    //multiInstanceScript = "multi-instance-setup.vb"

    // optional, set the installation scope to one of either `perUser` or `perMachine`
    installScope = 'perUser'

    // optional, add a VB-Script or Jscript to run before the setup GUI is displayed.
    // Note: this script does not run with elevated permissions
    // can be added multiple times.
    //preGui "<script>"

    // optional, make the run after application optional. An option will be displayed to the user in the setup.
    runAfterIsOptional = false
}

msi.dependsOn('jar') //,'createUpdate4JConfig')
