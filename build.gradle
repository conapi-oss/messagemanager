/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id "com.github.ben-manes.versions" version "0.51.0"
    id 'org.javamodularity.moduleplugin' version '1.8.15' apply false
}

repositories {
    // Use the plugin portal to apply community plugins in convention plugins.
    gradlePluginPortal()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.javamodularity.moduleplugin'
    apply plugin: 'maven-publish'

    sourceCompatibility = 17
    targetCompatibility = 17

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {

        compileOnly 'org.projectlombok:lombok:1.18.32'
        annotationProcessor 'org.projectlombok:lombok:1.18.32'

        testImplementation 'org.projectlombok:lombok:1.18.32'
        testImplementation 'junit:junit:[4,5)'
        testImplementation 'org.mockito:mockito-core:3.11.1'
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/gerco/messagemanager")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                    password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                from(components.java)
            }
        }
    }

    def appVersion = project.version // from gradle.properties
    def buildTimeStamp = new Date().toString()

    compileJava {
        doFirst {
            if (project.file("src/main/java-templates/Version.java").exists()) {

                ant.mkdir(dir: "${projectDir}/src/main/java/${project.targetPackage}")
                def newBuildInfo = new File("${projectDir}/src/main/java/${targetPackage}/Version.java")
                def templateBuildInfo = new File("${projectDir}/src/main/java-templates/Version.java")

                newBuildInfo.withWriter { def writer ->
                    templateBuildInfo.eachLine { def line ->
                        def newLine = line.replace("__PACKAGE", targetPackageJava)
                                .replace("__VERSION", appVersion)
                                .replace("__BUILD_ID", appVersion)
                                .replace("__BUILD_TIMESTAMP", buildTimeStamp)
                        writer.write(newLine + "\n");
                    }
                }
            }
        }
    }

   /* task copyJarToUserData(type: Copy) {
        onlyIf {
            // only copy jar for plugins to the user data folder
            file("${projectDir}/src/main/resources/MessageManager/plugins").exists()
        }

        from "build/libs/${project.name}-${project.version}.jar" // Source path (replace with your JAR name)
        into getUserDataFolder().toString() + "/MessageManager/plugins/${project.version}"
    }*/

    tasks.register('copyJarToBootstrap',Copy) {
        println 'Running copyJarToBootstrap'
        onlyIf {
            // only copy jar for plugins to the user data folder
            file("${projectDir}/src/main/resources/MessageManager/plugins").exists()
        }

        ant.mkdir(dir: "${projectDir}/../messagemanager-bootstrap/build/root/target/config/plugins")

        from "build/libs/${project.name}-${project.version}.jar" // Source path (replace with your JAR name)
        rename '([a-z]*-[a-z]*).*.jar', '$1.jar' // remove version from jar
        into "${projectDir}/../messagemanager-bootstrap/build/root/target/config/plugins"
    }

    // Ensure copying happens after JAR is built
   // build.dependsOn copyJarToUserData
    jar.finalizedBy('copyJarToBootstrap')
}

protected File getUserDataFolder() {
    def configPath = System.getenv("XDG_CONFIG_DIR")
    if (!configPath) {
        configPath = System.getenv("APPDATA")
    }

    if (!configPath) {
        def userHome = new File(System.getProperty("user.home"))
        return new File(userHome, ".config")
    } else {
        return new File(configPath)
    }
}